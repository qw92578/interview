package com.cd.interview.bit_cal;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;

/**
 * @Package: com.cd.interview.bit_cal
 * @ClassName: BitCla
 * @Author: fgq
 * @Description: 位运算
 * @Date: 2019/11/20 15:42
 */
public class BitCla {

    public static void main(String[] args) throws Exception {
        /**
         * & 运算 先转换成2进制   两边都是1 才为1
         *  |  或运算  有一个1 则为1
         *  ^ 亦或  （非） 相同取0   不相同取1
         *
         *  补码   负数是以补码形式表示     先转2进制  然后取反  再+1
         *
         *  取反 ~10    先转2进制   取反
         *
         *
         *  无符号>>> 移动
         *
         */
        //2的二进制是： 0000 0010
        //4的二进制是： 0000 0100
        //都为1  才为1
        // 0000 0000 ==>0
        System.out.println("2 & 4 结果："+(2 & 4));

        // 有一个1 就是1
        // 0000 0110  ==> 6
        System.out.println("2 | 4 结果："+(2 | 4));

        //相同为0 不同为1
        // 0000 0110  ==》6
        System.out.println("2 ^ 4 结果："+(2 ^ 4));


        //打印的结果是:   16>>2运算的结果是 :4
        // 二进制右移动2位  在左边加2个0
        // 16的二进制 0001 0000
        //  右移2位   0000 0100  ==>4
        System.out.println("16>>2运算的结果是 :"+((16)>>2));

        //打印的结果是:   -16>>2运算的结果是 :-4
        //-16 补码： 16的二进制  0001 0000
        //               取反   1110 1111
        //               +1     1111 0000
        // 右移2                 0011 1100 ==》
        System.out.println("-16>>2运算的结果是 :"+((-16)>>2));


        //打印的结果是:   16>>>2运算的结果是 :4
        System.out.println("16>>>2运算的结果是 :"+((16)>>>2));

        //打印的结果是:   -16>>>2运算的结果是 :1073741820
        System.out.println("-16>>>2运算的结果是 :"+((-16)>>>2));


        /** 负数右移：
         *  -16>>2
         *
         * 0001 0000    16的二进制
         * 1110 1111    取反
         * 1111 0000    +1
         *
         * 1111 1100    右移2
         * 1111 1011    -1
         * 0000 0100    取反
         * 4            加个负号  -5
         *
         */
        System.err.println("((-16) >> 2的结果：aaaaaaa"+((-16) >> 2));

        /**
         * 负数左移
         * -16 << 2
         *
         * 0001 0000    16的二进制
         * 1110 1111    取反  反码
         * 1111 0000    +1
         *
         * 1100 0000    左移2   高位补1
         * 1011 1111    -1
         * 0100 0000    取反
         * 64          加个负号 -64
         */
        System.err.println("((-16) << 2的结果：bbbbb"+((-16) << 2));

        /**
         * 无符号右移 >>>
         * 16 >>> 2
         * -10》》1
         * 0000 1010
         * 1111 0101 取反
         * 1111 0110  +1
         *
         * 1111 1011 右移1  高位补1
         * 1111 1010 -1
         * 0000 0101 取反
         * 5         加个负号 -5
         */


        String s1 = "a";

        String s2 = s1 + "b";

        String s3 = "a" + "b";

        System.out.println("             tyurtyrty111"+ (s2 == "ab"));

        System.out.println("ytytreyteryery222:"+(s3 == "ab"));
        try {
//            OutputStream os = new OutputStream(new File("/ddd"));
        } catch (Exception e) {
            throw new Exception("hha");
        }

    }


    /**
     *  byte是8位的，-1表示为byte型是11111111(补码表示法）
     *             b>>>4就是无符号右移4位，即00001111，这样结果就是15。
     *
     *             -1>>>4
     *             0000 0001
     *             1111 1110
     *             1111 1111
     *             0000 1111 == 15
     *
     *             -16>>>4
     *             0001 0000
     *             1110 1111
     *             1111 0000
     *             0000 1111
     */


}
